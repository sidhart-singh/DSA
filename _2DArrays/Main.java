package _2DArrays;

public class Main {
    public static void main(String[] args)

    {
        // WordSearch ws = new WordSearch();
        // System.out.println(ws.exist(
        // new char[][] { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'E', 'S' }, { 'A', 'D',
        // 'E', 'E' } }, "ABCESEEEFS"));

        // ValidSudoku vs = new ValidSudoku();
        // System.out.println(vs.isValidSudoku(new char[][] { { '5', '3', '.', '.', '7',
        // '.', '.', '.', '.' },
        // { '6', '.', '.', '1', '9', '5', '.', '.', '.' }, { '.', '9', '8', '.', '.',
        // '.', '.', '6', '.' },
        // { '8', '.', '.', '.', '6', '.', '.', '.', '3' }, { '4', '.', '.', '8', '.',
        // '3', '.', '.', '1' },
        // { '7', '.', '.', '.', '2', '.', '.', '.', '6' }, { '.', '6', '.', '.', '.',
        // '.', '2', '8', '.' },
        // { '.', '.', '.', '4', '1', '9', '.', '.', '5' }, { '.', '.', '.', '.', '8',
        // '.', '.', '7', '9' } }));

        // SudokuSolver ss = new SudokuSolver();
        // ss.solveSudoku(new char[][] { { '5', '3', '.', '.', '7', '.', '.', '.', '.'
        // },
        // { '6', '.', '.', '1', '9', '5', '.', '.', '.' }, { '.', '9', '8', '.', '.',
        // '.', '.', '6', '.' },
        // { '8', '.', '.', '.', '6', '.', '.', '.', '3' }, { '4', '.', '.', '8', '.',
        // '3', '.', '.', '1' },
        // { '7', '.', '.', '.', '2', '.', '.', '.', '6' }, { '.', '6', '.', '.', '.',
        // '.', '2', '8', '.' },
        // { '.', '.', '.', '4', '1', '9', '.', '.', '5' }, { '.', '.', '.', '.', '8',
        // '.', '.', '7', '9' } });

        CountSubmatricesOfEqualFreq csoef = new CountSubmatricesOfEqualFreq();
        csoef.numberOfSubmatrices(new char[][] { { 'X', 'Y', '.' }, { 'Y', '.', '.' } });
    }
}

// { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } }
